{
    "number": 365008,
    "data": "12,24,30,32,36,48,60,64,67,72,78,84,90,96,99,106,108,112,113,119,120,128,132,134,135,139,144,145,147,150,156,160,161,168,172,178,180,189,190,192,197,198,201,202,204,205,210,212,214,216,222,223,224,225,226,227,228,234",
    "name": "Solutions k to the exponential Diophantine equation k^5 = Sum_{i=1..6} y_i^5 with positive y_i.",
    "comment": [
        "This includes nonprimitive solutions, where all {k, y_1, y_2, ..., y_6} have a common divisor > 1.",
        "Primitive solutions are 12, 30, 32, 67, 78, 99, 106, 112, 113, 119, ... - _Chai Wah Wu_, Aug 18 2023"
    ],
    "link": [
        "Chai Wah Wu, <a href=\"/A365008/b365008.txt\">Table of n, a(n) for n = 1..118</a>",
        "<a href=\"/index/Di#Diophantine\">Index to sequences related to Diophantine equations</a> (5,1,6)."
    ],
    "example": [
        "12, 24 and 60 are in the sequence as demonstrated by the following sets of solutions, [y_1,...,y_6] and k after a colon: [4, 5, 6, 7, 9, 11]: 12. [8, 10, 12, 14, 18, 22]: 24. [10, 20, 22, 32, 38, 58]: 60. [20, 25, 30, 35, 45, 55]: 60."
    ],
    "program": [
        "(Python)",
        "from itertools import count, islice",
        "from sympy import integer_nthroot",
        "def A365008_gen(startvalue=1): # generator of terms >= startvalue",
        "    for n in count(max(startvalue,1)):",
        "        n5, flag = n**5, False",
        "        for i1 in range(1,n):",
        "            i15=i1**5",
        "            for i2 in range(i1,n):",
        "                i25 = i15+i2**5",
        "                if i25>=n5: break",
        "                for i3 in range(i2,n):",
        "                    i35 = i25+i3**5",
        "                    if i35>=n5: break",
        "                    for i4 in range(i3,n):",
        "                        i45 = i35+i4**5",
        "                        if i45>=n5: break",
        "                        for i5 in range(i4,n):",
        "                            i55 = i5**5",
        "                            i65 = n5-i45-i55",
        "                            if i65<i55: break",
        "                            if integer_nthroot(i65,5)[1]:",
        "                                yield n",
        "                                flag = True",
        "                                break",
        "                        if flag: break",
        "                    if flag: break",
        "                if flag: break",
        "            if flag: break",
        "A365008_list = list(islice(A365008_gen(),4)) # _Chai Wah Wu_, Aug 17 2023"
    ],
    "keyword": "nonn,new",
    "offset": "1,1",
    "author": "_R. J. Mathar_, Aug 16 2023",
    "references": 1,
    "revision": 42,
    "time": "2023-08-24T02:42:25-04:00",
    "created": "2023-08-16T10:28:51-04:00"
}