{
    "number": 373178,
    "data": "1,2,3,4,5,5,6,7,7,7,8,8,9,10,10,10,11,11,12,12,13,13,14,15,15,16,17,18,19,19,20,20,20,21,21,21,22,23",
    "name": "Cardinality of the largest subset of {1,...,n} such that no five distinct elements of this subset multiply to a square.",
    "comment": [
        "a(n) >= A373114(n).",
        "The limiting value of a(n)/n is unknown, but (if it exists), it is strictly less than 1, and at least A246849 ~ 0.828499... (see cited paper of Tao).",
        "a(n+1)-a(n) is either 0 or 1 for any n.",
        "If \"five\" is replaced by \"one\", \"two\", \"three\", \"four\", or \"odd number of\", one obtains A028391, A013928, A372306, A373119, A373114 respectively."
    ],
    "link": [
        "Terence Tao, <a href=\"https://arxiv.org/abs/2405.11610\">On product representations of squares</a>, arXiv:2405.11610 [math.NT], May 2024."
    ],
    "example": [
        "a(8)=7, because the set {1,2,3,4,5,7,8} has no five distinct elements multiplying to a square, but {1,2,3,4,5,6,7,8} has 1*2*3*4*6 = 12^2."
    ],
    "program": [
        "(Python)",
        "from math import isqrt",
        "def is_square(n):",
        "    return isqrt(n) ** 2 == n",
        "def precompute_tuples(N):",
        "    tuples = []",
        "    for i in range(1, N + 1):",
        "        for j in range(i + 1, N + 1):",
        "            for k in range(j + 1, N + 1):",
        "                for l in range(k + 1, N + 1):",
        "                    for m in range(l + 1, N + 1):",
        "                        if is_square(i * j * k * l * m):",
        "                            tuples.append((i, j, k, l, m))",
        "    return tuples",
        "def valid_subset(A, tuples):",
        "    set_A = set(A)",
        "    for i, j, k, l, m in tuples:",
        "        if i in set_A and j in set_A and k in set_A and l in set_A and m in set_A:",
        "            return False",
        "    return True",
        "def largest_subset_size(N, tuples):",
        "    from itertools import combinations",
        "    for size in reversed(range(1, N + 1)):",
        "        for subset in combinations(range(1, N + 1), size):",
        "            if valid_subset(subset, tuples):",
        "                return size",
        "for N in range(1, 26):",
        "    print(largest_subset_size(N, precompute_tuples(N)))"
    ],
    "xref": [
        "Similar to A028391, A013928, A372306, A373119.  Lower bounded by A373114."
    ],
    "keyword": "nonn,more,new",
    "offset": "1,2",
    "author": "_Terence Tao_, May 26 2024",
    "ext": [
        "a(26)-a(37) from _Michael S. Branicky_, May 27 2024"
    ],
    "references": 0,
    "revision": 10,
    "time": "2024-05-27T07:18:16-04:00",
    "created": "2024-05-27T07:18:16-04:00"
}