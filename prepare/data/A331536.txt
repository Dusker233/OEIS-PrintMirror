{
    "number": 331536,
    "data": "1,3,6,11,25,69,282,1730,15885,210105,3986987,106053474",
    "name": "Number of words that can be reached in at most n - 1 steps in the MIU system starting from the word 'mi'.",
    "comment": [
        "The MIU system was invented by Douglas Hofstadter and is found in his book G\u00f6del, Escher, Bach.",
        "In the MIU system words begin with the letter 'm' with the remaining letters being either 'u' or 'i'. Essentially, words can be represented by binary strings. It is given that 'mi' is a word. Thereafter, at each step words may be transformed by one of the following rules.",
        "   1) Append a 'u' to a word ending in 'i'.",
        "   2) Append a word to itself, excluding the initial 'm'.",
        "   3) Replace an occurrence of 'iii' by 'u'.",
        "   4) Remove an occurrence of 'uu'."
    ],
    "link": [
        "Sean A. Irvine, <a href=\"https://github.com/archmageirvine/joeis/blob/master/src/irvine/oeis/a331/A331536.java\">Java program</a> (github)",
        "A. Matos, <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.105.9853\">On the number of lines of theorems in the formal system MIU</a>, Universidade do Porto, 2000, 1-10.",
        "Wikipedia, <a href=\"https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach\">G\u00f6del, Escher, Bach</a>",
        "Wikipedia, <a href=\"https://en.wikipedia.org/wiki/MU_puzzle\">MU Puzzle</a>"
    ],
    "example": [
        "The a(2) = 3 words that can be reached in at most one step are mi, miu, mii.",
        "The a(3) = 6 words that can be reached in at most two steps are mi, miu, mii, miiii, miiu, miuiu."
    ],
    "program": [
        "(Python)",
        "def occurrence_swaps(w, s, t):",
        "  out, oi = [], w.find(s)",
        "  while oi != -1:",
        "    out.append(w[:oi] + t + w[oi+len(s):])",
        "    oi = w.find(s, oi+1)",
        "  return out",
        "def moves(w): # moves for word w in miu system",
        "  nxt = [w + w] # Rule 2 ('m' not stored; else use nxt = [w + w[1:]])",
        "  if w[-1] == 'i': nxt.append(w + 'u')       # Rule 1",
        "  nxt.extend(occurrence_swaps(w, 'iii', 'u')) # Rule 3",
        "  nxt.extend(occurrence_swaps(w, 'uu', ''))   # Rule 4",
        "  return nxt",
        "def alst(maxd=float('inf'), v=False):",
        "  alst, d = [], 0",
        "  reached, frontier = {'i'}, {'i'} # don't store 'm's (else use 'mi' twice)",
        "  alst.append(len(reached))",
        "  if v: print(len(reached), end=\", \")",
        "  while len(frontier) > 0 and d < maxd:",
        "    reach1 = set(m for p in frontier for m in moves(p) if m not in reached)",
        "    if v: print(len(reached)+len(reach1), end=\", \")",
        "    alst.append(len(reached)+len(reach1))",
        "    reached |= reach1",
        "    frontier = reach1",
        "    d += 1",
        "  return alst",
        "alst(maxd=10, v=True) # _Michael S. Branicky_, Dec 29 2020"
    ],
    "keyword": "nonn,more",
    "offset": "1,2",
    "author": "_Brian Tenneson_, Jan 19 2020",
    "ext": [
        "a(11) from _R\u00e9my Sigrist_, Feb 26 2020",
        "a(12) from _Sean A. Irvine_, Mar 20 2020"
    ],
    "references": 1,
    "revision": 26,
    "time": "2022-05-31T12:53:19-04:00",
    "created": "2020-03-25T20:09:02-04:00"
}