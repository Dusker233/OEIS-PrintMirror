{
    "number": 353280,
    "data": "0,5,6,10,12,15,18,20,24,25,30,35,36,40,42,45,48,50,54,55,56,60,65,66,70,72,75,78,80,84,85,90,91,95,96,100,102,105,108,110,112,114,115,120,125,126,130,132,135,138,140,144,145,150,153,155,156,160,162,165",
    "name": "n is a term if n = 0 or n does not divide F(n, k) for all k >= 0, where F(n, k) are the Fibonacci numbers A352744.",
    "comment": [
        "n is a term if 0 is not a term of the sequence A352747(n, .). Since A352747(n, .) is for all n a pure periodic sequence, it is sufficient to require that 0 is not a term of period(A352747(n, .)). Since the length of the period is <= n, the condition can be checked in a finite number of steps.",
        "The multiples of 5 and 6 (A093509) are a subsequence. The terms not of this form start 56, 91, 112, ..., and are in A353281."
    ],
    "example": [
        "period(A352747(6, .)) = (5, 1, 3) is zero-free, therefore 6 is a term of a.",
        "period(A352747(7, .)) = (1, 0, 6, 5, 4, 3, 2), thus 7 is not a term of a."
    ],
    "maple": [
        "f := n -> combinat:-fibonacci(n): F := (n, k) -> (n-1)*f(k) + f(k+1):",
        "df := n -> denom(f(n)/n) - 1: period := n -> [seq(modp(F(k,n), n), k = 0..df(n))]:",
        "isA353280 := n -> n = 0 or not member(0, period(n)):",
        "select(isA353280, [$(0..166)]);"
    ],
    "program": [
        "(SageMath)",
        "def F(n, k): return (n - 1)*fibonacci(k) + fibonacci(k + 1)",
        "def df(n): return denominator(fibonacci(n) / n)",
        "def period(n): return (Integer(n).divides(F(k, n)) for k in range(df(n)))",
        "def isA353280(n): return n == 0 or not any([k == True for k in period(n)])",
        "def A353280List(upto): return [n for n in range(upto + 1) if isA353280(n)]",
        "print(A353280List(165))"
    ],
    "xref": [
        "a = A093509 union A353281.",
        "Cf. A352744, A352747."
    ],
    "keyword": "nonn",
    "offset": "1,2",
    "author": "_Peter Luschny_, Apr 09 2022",
    "references": 2,
    "revision": 10,
    "time": "2022-04-11T12:55:41-04:00",
    "created": "2022-04-11T12:55:41-04:00"
}