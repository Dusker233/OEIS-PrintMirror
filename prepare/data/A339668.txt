{
    "number": 339668,
    "data": "0,2,6,14,30,60,114,204,348,564,884,1332,1972,2844,3976,5470,7396,9852,12962,16802,21522",
    "name": "Number of length-n binary strings having minimum string attractor size 2.",
    "comment": [
        "A set S of positions of a string w[1..n] is called a \"string attractor\" if every nonempty contiguous block occurring in w has an occurrence in w that touches at least one of the positions of S.  For example, \"alfalfa\" has a string attractor of size 3:  {3,4,5}."
    ],
    "link": [
        "D. Kempa and N. Prezza. <a href=\"https://dl.acm.org/doi/abs/10.1145/3188745.3188814\">At the roots of dictionary compression: string attractors</a>. In STOC\u201918 Proceedings, ACM Press, 2018, pp. 827-840."
    ],
    "formula": [
        "a(n) = A355520(n) - 2, since only 0^n and 1^n possess string attractors of size 1. - _Michael S. Branicky_, Jul 06 2022"
    ],
    "program": [
        "(Python) # needs subroutines in A339391",
        "from itertools import product, combinations",
        "def lsa_is_2(w): # length of smallest attractor of w  is 2",
        "  for r in range(1, 3):",
        "    for s in combinations(range(len(w)), r):",
        "      if is_attractor(set(s), w): return r == 2",
        "  return False",
        "def a(n):  # twice value of strings starting with 0 by symmetry",
        "  return 2*sum(lsa_is_2(\"0\"+\"\".join(u)) for u in product(\"01\", repeat=n-1))",
        "print([a(n) for n in range(1, 12)]) # _Michael S. Branicky_, Dec 20 2020"
    ],
    "xref": [
        "Cf. A339391, A355520."
    ],
    "keyword": "nonn,more",
    "offset": "1,2",
    "author": "_Jeffrey Shallit_, Dec 12 2020",
    "ext": [
        "a(19)-a(20) from _Michael S. Branicky_, Dec 20 2020",
        "a(21) from _Michael S. Branicky_, Jul 06 2022"
    ],
    "references": 1,
    "revision": 21,
    "time": "2022-07-07T02:03:37-04:00",
    "created": "2020-12-12T04:46:17-05:00"
}