{
    "number": 57706,
    "data": "5,29,2309",
    "name": "Smaller of twin primes whose average is a primorial number.",
    "comment": [
        "According to Caldwell, the next term, if it exists, has more than 100000 digits. - _T. D. Noe_, May 08 2012"
    ],
    "link": [
        "Chris K. Caldwell, <a href=\"https://t5k.org/glossary/page.php?sort=PrimorialPrime\">Primorial prime</a>.",
        "Rudolf Ondrejka, <a href=\"https://primes.utm.edu/lists/top_ten/topten.pdf\">The Top Ten: a Catalogue of Primal Configurations</a>, 2001, tables 20A, 20B.",
        "Eric Weisstein's World of Mathematics, <a href=\"https://mathworld.wolfram.com/PrimorialPrime.html\">Primorial Prime</a>.",
        "<a href=\"https://oeis.org/wiki/Index_to_OEIS:_Section_Pri#primorial_numbers.2C_sequences_related_to_:\">Index entries for sequences related to primorial numbers</a>."
    ],
    "example": [
        "(5+7)/2 = 6 = 2*3, (29+31)/2 = 30 = 2*3*5, (2309+2311)/2 = 2310 = 2*3*5*7*11."
    ],
    "mathematica": [
        "Select[FoldList[Times, Prime@ Range@ 40], AllTrue[# + {-1, 1}, PrimeQ] &] - 1 (* _Michael De Vlieger_, Jul 15 2017 *)"
    ],
    "program": [
        "(Python)",
        "from sympy import isprime, prime, primerange",
        "def auptoprimorial(limit):",
        "  phash, alst = 1, []",
        "  for p in primerange(1, prime(limit)+1):",
        "    phash *= p",
        "    if isprime(phash-1) and isprime(phash+1): alst.append(phash-1)",
        "  return alst",
        "print(auptoprimorial(5)) # _Michael S. Branicky_, May 29 2021"
    ],
    "xref": [
        "Cf. A000040 (primes), A002110 (primorials, p#).",
        "Cf. A006862 (Euclid, p#+1), A005234 (prime p#+1), A014545 (index prime p#+1).",
        "Cf. A057588 (Kummer, p#-1), A006794 (prime p#-1), A057704 (index prime p#-1)."
    ],
    "keyword": "nonn,bref",
    "offset": "1,1",
    "author": "_Labos Elemer_, Oct 24 2000",
    "ext": [
        "Offset corrected by _Arkadiusz Wesolowski_, May 08 2012"
    ],
    "references": 5,
    "revision": 25,
    "time": "2023-04-03T10:36:09-04:00",
    "created": "2003-05-16T03:00:00-04:00"
}