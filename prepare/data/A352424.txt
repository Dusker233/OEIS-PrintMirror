{
    "number": 352424,
    "data": "14720439,16535628,34714710,40741208,61436388,603346308,1172360113,1368156941,1574100889,1924496102,1989253499,2021860243,6774546339,9770541610,12230855963,12311606487,12540842446,14513723777,26423329489,38648724198,47638558043,50195886916,50811319931,56449248367",
    "name": "Numbers that can be written as sums of squares of consecutive primes in two ways.",
    "link": [
        "Michael S. Branicky, <a href=\"/A352424/b352424.txt\">Table of n, a(n) for n = 1..991</a>",
        "Cathal O'Sullivan, Jonathan P. Sorenson, and Aryn Stahl, <a href=\"https://arxiv.org/abs/2204.10930\">An Algorithm to Find Sums of Consecutive Powers of Primes</a>, arXiv:2204.10930 [math.NT], 2022. See 4.2 Duplicates p. 8-9.",
        "Michael S. Branicky, <a href=\"/A352424/a352424.py.txt\">Python Program</a>"
    ],
    "program": [
        "(Python) # see link for a version suitable for producing b-file",
        "from sympy import primerange, integer_nthroot",
        "def aupto(limit):",
        "    adict = dict()",
        "    rootlimit = integer_nthroot(limit, 2)[0]",
        "    for x in primerange(2, rootlimit+1):",
        "        s = x**2",
        "        adict[s] = 1",
        "        for y in primerange(x+1, rootlimit+1):",
        "            s += y**2",
        "            if s <= limit:",
        "                if s not in adict:",
        "                    adict[s] = 1",
        "                else:",
        "                    adict[s] += 1",
        "            else:",
        "                break",
        "    return sorted(s for s in adict if adict[s] == 2)",
        "print(aupto(6*10**10)) # _Michael S. Branicky_, Apr 26 2022~"
    ],
    "xref": [
        "Cf. A001248, A340771."
    ],
    "keyword": "nonn",
    "offset": "1,1",
    "author": "_Michel Marcus_, Apr 26 2022",
    "references": 1,
    "revision": 14,
    "time": "2022-04-27T12:28:00-04:00",
    "created": "2022-04-26T07:28:59-04:00"
}