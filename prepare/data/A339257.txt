{
    "number": 339257,
    "data": "1,27648,146356224,698512774464,3271331573452800,15258885095892902976,71111090441547013886784,331335100372867196224868352,1543757070688065237574186369344,7192607774929149127350811889484864,33511424900308657559195109303117533184,156134620449573478209362729027690283037248",
    "name": "Number of spanning trees in the n X 5 king graph.",
    "link": [
        "Seiichi Manyama, <a href=\"/A339257/b339257.txt\">Table of n, a(n) for n = 1..200</a>",
        "Eric Weisstein's World of Mathematics, <a href=\"http://mathworld.wolfram.com/KingGraph.html\">King Graph</a>",
        "Eric Weisstein's World of Mathematics, <a href=\"http://mathworld.wolfram.com/SpanningTree.html\">Spanning Tree</a>"
    ],
    "formula": [
        "Empirical g.f.: -x*(218700000000*x^8 - 2040471000000*x^7 + 538526880000*x^6 + 311791396500*x^5 - 17462695797*x^4 - 80280747*x^3 + 10513308*x^2 - 21759*x - 1) / (656100000000*x^8 - 4293081000000*x^7 + 4819127400000*x^6 - 930215250900*x^5 + 51621632181*x^4 - 1033572501*x^3 + 5949540*x^2 - 5889*x + 1). - _Vaclav Kotesovec_, Dec 09 2020"
    ],
    "program": [
        "(Python)",
        "# Using graphillion",
        "from graphillion import GraphSet",
        "def make_nXk_king_graph(n, k):",
        "    grids = []",
        "    for i in range(1, k + 1):",
        "        for j in range(1, n):",
        "            grids.append((i + (j - 1) * k, i + j * k))",
        "            if i < k:",
        "                grids.append((i + (j - 1) * k, i + j * k + 1))",
        "            if i > 1:",
        "                grids.append((i + (j - 1) * k, i + j * k - 1))",
        "    for i in range(1, k * n, k):",
        "        for j in range(1, k):",
        "            grids.append((i + j - 1, i + j))",
        "    return grids",
        "def A338029(n, k):",
        "    if n == 1 or k == 1: return 1",
        "    universe = make_nXk_king_graph(n, k)",
        "    GraphSet.set_universe(universe)",
        "    spanning_trees = GraphSet.trees(is_spanning=True)",
        "    return spanning_trees.len()",
        "def A339257(n):",
        "    return A338029(n, 5)",
        "print([A339257(n) for n in range(1, 15)])"
    ],
    "xref": [
        "Column 5 of A338029.",
        "Cf. A003779."
    ],
    "keyword": "nonn",
    "offset": "1,2",
    "author": "_Seiichi Manyama_, Nov 29 2020",
    "references": 3,
    "revision": 16,
    "time": "2020-12-09T05:29:23-05:00",
    "created": "2020-11-29T08:19:12-05:00"
}