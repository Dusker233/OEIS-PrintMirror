{
    "number": 366916,
    "data": "2,2,2,3,4,5,6,8,9,11,15,18,22,30,35,43,57,69,88,114,142,177",
    "name": "Maximum number of codewords for particular code length of two deletion binary Helberg code.",
    "comment": [
        "The maximum number of codewords for different N in Helberg code for two deletion binary Helberg code."
    ],
    "reference": [
        "K. A. S. Abdel-Ghaffar, F. Paluncic, H. C. Ferreira and W. A. Clarke, \"On Helberg's Generalization of the Levenshtein Code for Multiple Deletion/Insertion Error Correction,\" in IEEE Transactions on Information Theory, vol. 58, no. 3, pp. 1804-1808, March 2012, doi: 10.1109/TIT.2011.2174961."
    ],
    "link": [
        "<a href=\"https://ieeexplore.ieee.org/document/6071006\"> link </a>"
    ],
    "example": [
        "For N = 4, using the Helberg formula Equation 2 in the reference paper, we will get different values of 'a' for different codewords. Now, the maximum number of codewords for a particular 'a' will be 2 in this example.",
        "The same formula is used to calculate 'a' and then the maximum number of codewords for different values of N."
    ],
    "program": [
        "(Python) import numpy as np",
        "(Python) import sys",
        "(Python) def String_generate(n, k, x, final_list):",
        "(Python)     if n == 0:",
        "(Python)         final_list.append(x[:])",
        "(Python)     else:",
        "(Python)         for j in range(0, k):",
        "(Python)             x.append(j)",
        "(Python)             String_generate(n-1, k, x, final_list)",
        "(Python)             x.pop()",
        "(Python)     return x",
        "(Python) def Vi_generate(n, s, v):",
        "(Python)     for i in range(0, n):",
        "(Python)         for j in range(1, s+1):",
        "(Python)             v[i] += v[i-j] if (i-j >= 0) else 0",
        "(Python) def find_M(v, s, n):",
        "(Python)     m = 1",
        "(Python)     for i in range(1, s+1):",
        "(Python)         m += v[n-i]",
        "(Python)     return m",
        "(Python) def func(num, v, m, n, ans):",
        "(Python)     sum = 0",
        "(Python)     for i in range(0, n):",
        "(Python)         sum += v[i]*num[i]",
        "(Python)     sum = sum % m",
        "(Python)     if sum not in ans:",
        "(Python)         ans[sum] = []",
        "(Python)     ans[sum].append(num)",
        "(Python) def a(n):",
        "(Python)     x = []",
        "(Python)     final_list = []",
        "(Python)     q = 2",
        "(Python)     s = 2",
        "(Python)     v = np.ones(n)",
        "(Python)     ans = {}",
        "(Python)     if s < n:",
        "(Python)         String_generate(n, q, x, final_list)",
        "(Python)         x = final_list",
        "(Python)         x = np.array(x)",
        "(Python)         Vi_generate(n, s, v)",
        "(Python)         m = find_M(v, s, n)",
        "(Python)         for i in x:",
        "(Python)             func(i, v, m, n, ans)",
        "(Python)     else:",
        "(Python)         ans[0] = []",
        "(Python)     return max(len(v) for v in ans.values())"
    ],
    "keyword": "nonn,unkn,easy,hear,new",
    "offset": "1,1",
    "author": "_Devdeep Shetranjiwala_, Oct 28 2023",
    "references": 0,
    "revision": 17,
    "time": "2023-10-28T18:08:45-04:00",
    "created": "2023-10-28T18:08:45-04:00"
}