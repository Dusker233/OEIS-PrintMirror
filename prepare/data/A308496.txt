{
    "number": 308496,
    "data": "1,2,4,7,9,10,12,15,17,18,20,23,33,34,36,39,57,58,60,63,73,74,76,79,81,82,84,87,97,98,100,103,121,122,124,127,137,138,140,143,145,146,148,151,161,162,164,167,185,186,188,191,265,266,268,271,273",
    "name": "Numbers with digits 1,2,4,7 when written in base 8.",
    "comment": [
        "Floretions of all orders. - _Creighton Dement_, Oct 28 2022",
        "For any natural number n, the set of terms of this sequence between indices (4^n-1)/3 and (4^(n+1)-4)/3 is \"isomorphic\" to the group of n-th order floretions. In this case, group multiplication is given by bitwise logical operations (see EXAMPLE). Note that the case of n = 1 is simply the quaternions.",
        "In the table below, the left column is the binary representation, the middle column the terms of ((a(n)) and the right column the conventional notation. Multiply x*y (disregarding signs) using the bitwise XNOR operation, where x and y are any floretions of the same order. The XNOR operation returns a 1 if the number of 1's in its inputs is even, and a 0 if the number of 1's is odd. This operation is used to calculate the base vector of the result.",
        "**** 1st-order floretions (= quaternions) ****",
        "         | binary  | decimal | floretion",
        "  1      | 001     |    1    |   i",
        "  2      | 010     |    2    |   j",
        "  4      | 100     |    4    |   k",
        "  7      | 111     |    7    |   e (unit)",
        "**** 2nd-order floretions ****",
        "  1_1    | 001_001 |    9    |   ii",
        "  1_2    | 001_010 |   10    |   ij",
        "  1_4    | 001_100 |   12    |   ik",
        "  1_7    | 001_111 |   15    |   ie",
        "  2_1    | 010_001 |   17    |   ji",
        "  2_2    | 010_010 |   18    |   jj",
        "  2_4    | 010_100 |   20    |   jk",
        "  2_7    | 010_111 |   23    |   je",
        "  4_1    | 100_001 |   33    |   ki",
        "  4_2    | 100_010 |   34    |   kj",
        "  4_4    | 100_100 |   36    |   kk",
        "  4_7    | 100_111 |   39    |   ke",
        "  7_1    | 111_001 |   57    |   ei",
        "  7_2    | 111_010 |   58    |   ej",
        "  7_4    | 111_100 |   60    |   ek",
        "  7_7    | 111_111 |   63    |   ee",
        "**** 3rd-order floretions ****",
        "  1_1_1",
        "  1_1_2",
        "  ...",
        "Note that for a floretion of order n, two digits from any one of its \"binary triplets\" _abc_ determine the other since XOR(a,b,c) = 1.",
        "When working with a floretion algebra over the reals, i.e., elements of the form x = q_1*f_1 + ... q_m*f_m where q_1,...,q_m are real numbers and f_1,...,f_m are any floretions of the same order, then x may also be referred to as a \"floretion\". In this case f_1,...,f_m (i.e., terms of this sequence) may be referred to as \"floretion base vectors\" to avoid confusion.",
        "Taking signs into account:",
        "Given two binary representations (ab) and (cd) for quaternion elements, define multiplication as:",
        "    Compute (XNOR(a,c))(XNOR(b,d)) to get the base vector of the result.",
        "    Compute AND(b,c), AND(XNOR(a,b),d), and AND(a,XNOR(c,d)). These are all bitwise AND operations.",
        "    The sign is negative if and only if the total number of 1's in the results is odd.",
        "For example, with k*j = (10)*(01) = -i, compute:",
        "    The base vector as (XNOR(1,0) XNOR(0,1)) = (0)(0) = i.",
        "    The signs as AND(0,1), AND(XNOR(1,0),1), AND(1, XNOR(0,1)) = 0, 0, 0. There are zero 1's in total, which is an even number, so the result is negative.",
        "An example of image processing: take for example a quaternion x = .2i + .5j + .3k + e. Assume we have a square monitor (aspect ratio). Furthermore, assume the screen is divided into 4 squares- one for i (bottom left), one for j (top left), one for k (top right) one for e (bottom right) and that the coefficient is the amount the pixels are lit up on the screen (1 being full brightness, 0 being off- this could be modified later to accomodate negative numbers).  Now imagine we have square monitor of resolution 2^n x 2^n. Then we can represent any black and white image with that resolution with an n-th order floretion. This means we can multiply images together, with some parallels to Fourier analysis.",
        "Multiplying an image by an idempotent floretion would allow one to repeatedly apply a specific transformation (e.g., a rotation, scaling, or some other operation) to an image, and then undo all of those transformations by continuing to apply the same operation a certain number of times. It could be used in applications such as data encryption, where an image could be \"scrambled\" using a specific floretion and then \"unscrambled\" by continuing to apply the same floretion.",
        "A compact definition of multiplication is",
        "x*y = (ab)(cd) = (-1)^{m+1} (aqc)(bqd) where m = b&c + (aqb)&d + a&(cqd) and \"q\", \"&\" are the bitwise XNOR and AND operators respectively. - _Creighton Dement_, Jul 09 2023"
    ],
    "link": [
        "Creighton Dement, <a href=\"/A308496/b308496.txt\">Table of n, a(n) for n = 1..10000</a>"
    ],
    "program": [
        "(PARI) is(n)=!#setminus(Set(digits(n,8)),[1,2,4,7]);",
        "a(n) =",
        "{",
        "  local(total_count, index);",
        "  until(total_count == n+1, if(is(index)==1, total_count++); index++);",
        "  index-1;",
        "}",
        "(PARI) a(n,b=8,d=[1,2,4,7]) = { for (w=1, oo, if (n>#d^w, n-=#d^w, return (fromdigits(apply(x -> d[1+x], digits(#d^w+n-1, #d))[2..-1],b)))) } \\\\ _R\u00e9my Sigrist_, Jun 01 2019"
    ],
    "xref": [
        "Cf. A007094, A108618, A047541."
    ],
    "keyword": "nonn,base",
    "offset": "1,2",
    "author": "_Creighton Dement_, Jun 01 2019",
    "references": 1,
    "revision": 41,
    "time": "2023-08-02T14:46:18-04:00",
    "created": "2019-07-14T13:41:42-04:00"
}