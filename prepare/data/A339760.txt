{
    "number": 339760,
    "data": "1,12,48,208,768,2752,9472,32000,106496,351232,1150976,3756032,12222464,39698432,128778240,417398784,1352138752,4378591232,14175698944,45886734336,148520304640,480679821312,1555633799168,5034389536768,16292153131008,52723609239552,170619454881792,552140862914560",
    "name": "Number of (undirected) Hamiltonian paths in the 2 X n king graph.",
    "link": [
        "Andrew Howroyd, <a href=\"/A339760/b339760.txt\">Table of n, a(n) for n = 1..500</a> (terms 1..50 from Seiichi Manyama)",
        "Eric Weisstein's World of Mathematics, <a href=\"http://mathworld.wolfram.com/GraphPath.html\">Graph Path</a>",
        "Eric Weisstein's World of Mathematics, <a href=\"http://mathworld.wolfram.com/KingGraph.html\">King Graph</a>",
        "<a href=\"/index/Rec#order_04\">Index entries for linear recurrences with constant coefficients</a>, signature (6,-8,-8,16)."
    ],
    "formula": [
        "Empirical g.f.: x*(1 + 6*x - 16*x^2 + 24*x^3 - 16*x^4) / ((1 - 2*x)^2 * (1 - 2*x - 4*x^2)). - _Vaclav Kotesovec_, Dec 16 2020",
        "The above formula is correct. - _Andrew Howroyd_, Jan 17 2022"
    ],
    "program": [
        "(Python)",
        "# Using graphillion",
        "from graphillion import GraphSet",
        "def make_nXk_king_graph(n, k):",
        "    grids = []",
        "    for i in range(1, k + 1):",
        "        for j in range(1, n):",
        "            grids.append((i + (j - 1) * k, i + j * k))",
        "            if i < k:",
        "                grids.append((i + (j - 1) * k, i + j * k + 1))",
        "            if i > 1:",
        "                grids.append((i + (j - 1) * k, i + j * k - 1))",
        "    for i in range(1, k * n, k):",
        "        for j in range(1, k):",
        "            grids.append((i + j - 1, i + j))",
        "    return grids",
        "def A(start, goal, n, k):",
        "    universe = make_nXk_king_graph(n, k)",
        "    GraphSet.set_universe(universe)",
        "    paths = GraphSet.paths(start, goal, is_hamilton=True)",
        "    return paths.len()",
        "def B(n, k):",
        "    m = k * n",
        "    s = 0",
        "    for i in range(1, m):",
        "        for j in range(i + 1, m + 1):",
        "            s += A(i, j, n, k)",
        "    return s",
        "def A339760(n):",
        "    return B(n, 2)",
        "print([A339760(n) for n in range(1, 21)])",
        "(PARI) Vec((1 + 6*x - 16*x^2 + 24*x^3 - 16*x^4) / ((1 - 2*x)^2 * (1 - 2*x - 4*x^2)) + O(x^20)) \\\\ _Andrew Howroyd_, Jan 17 2022"
    ],
    "xref": [
        "Row 2 of A350729.",
        "Cf. A308129, A339750, A339761, A339762, A339763."
    ],
    "keyword": "nonn,easy",
    "offset": "1,2",
    "author": "_Seiichi Manyama_, Dec 16 2020",
    "references": 6,
    "revision": 20,
    "time": "2022-01-17T17:32:55-05:00",
    "created": "2020-12-16T07:06:29-05:00"
}