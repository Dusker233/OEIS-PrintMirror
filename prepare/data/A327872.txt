{
    "number": 327872,
    "data": "1,4,21,148,980,6444,41888,270088,1730079,11023480,69930146,441988260,2784820519,17499028820,109701885600,686313858480,4285914086100,26721615383496,166361793070466,1034375862301240,6423778211164860,39850734775066644,246976735839649218",
    "name": "Total number of nodes in all self-avoiding planar walks starting at (0,0), ending at (n,n), remaining in the first quadrant and using steps (0,1), (-1,1), and (1,-1) with the restriction that (-1,1) and (1,-1) are always immediately followed by (0,1).",
    "link": [
        "Alois P. Heinz, <a href=\"/A327872/b327872.txt\">Table of n, a(n) for n = 0..1276</a>",
        "Alois P. Heinz, <a href=\"/A327871/a327871.gif\">Animation of A327871(5) = 369 walks with a(5) = 6444 nodes</a>",
        "Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Lattice_path\">Lattice path</a>",
        "Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Self-avoiding_walk\">Self-avoiding walk</a>"
    ],
    "formula": [
        "a(n) ~ sqrt(113 - 179/sqrt(13)) * (70 + 26*sqrt(13))^n * sqrt(n) / (sqrt(Pi) * 2^(3/2) * 3^(3*n + 3/2)). - _Vaclav Kotesovec_, Oct 12 2019"
    ],
    "maple": [
        "b:= proc(x, y, t) option remember; (p-> p+[0, p[1]])(`if`(",
        "       min(x, y)<0, 0, `if`(max(x, y)=0, [1, 0], b(x-1, y, 1)+",
        "      `if`(t=1, b(x-1, y+1, 0)+b(x+1, y-1, 0), 0))))",
        "    end:",
        "a:= n-> b(n$2, 0)[2]:",
        "seq(a(n), n=0..25);"
    ],
    "mathematica": [
        "b[x_, y_, t_] := b[x, y, t] = Function[p, p + {0, p[[1]]}][If[Min[x, y] < 0, {0, 0}, If[Max[x, y] == 0, {1, 0}, b[x - 1, y, 1] + If[t == 1, b[x - 1, y + 1, 0] + b[x + 1, y - 1, 0], 0]]]];",
        "a[n_] := b[n, n, 0][[2]];",
        "a /@ Range[0, 25] (* _Jean-Fran\u00e7ois Alcover_, May 13 2020, after Maple *)"
    ],
    "xref": [
        "Cf. A327871."
    ],
    "keyword": "nonn,walk",
    "offset": "0,2",
    "author": "_Alois P. Heinz_, Sep 28 2019",
    "references": 2,
    "revision": 17,
    "time": "2020-05-13T05:21:50-04:00",
    "created": "2019-10-07T12:03:16-04:00"
}