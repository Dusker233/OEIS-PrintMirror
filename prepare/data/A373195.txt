{
    "number": 373195,
    "data": "1,2,3,4,5,6,7,8,8,8,9,9,10,10,10,10,11,12,13,13,13,13,14,14,14",
    "name": "Cardinality of the largest subset of {1,...,n} such that no six distinct elements of this subset multiply to a square.",
    "comment": [
        "a(n) >= A000720(n) + A000720(n/2).",
        "a(n) ~ 3n/2log n (Erd\u0151s-S\u00e1rk\u00f6zy-S\u00f3s).  Best bounds currently are due to Pach-Vizer.",
        "a(n+1)-a(n) is either 0 or 1 for any n. (Is equal to 1 when n+1 is prime.)",
        "If \"six\" is replaced by \"one\", \"two\", \"three\", \"four\", \"five\", or \"any odd\", one obtains A028391, A013928, A372306, A373178, A373119, and A373114 respectively."
    ],
    "link": [
        "P. Erd\u0151s, A. S\u00e1rk\u00f6zy, and V. T. S\u00f3s, <a href=\"https://doi.org/10.1016/0195-6698(95)90039-X\">On Product Representations of Powers, I</a>, Europ. J. Combinatorics 16 (1995), 567-588.",
        "P. Pach and M. Vizer, <a href=\"https://doi.org/10.37236/11477\">Improved Lower Bounds for Multiplicative Square-Free Sequences</a>, The Electronic Journal of Combinatorics, Volume 30, Issue 4 (2023), P4.31."
    ],
    "example": [
        "a(9)=8, because {1,2,3,4,5,7,8,9} does not contain six distinct elements that multiply to a square, but {1,2,3,4,5,6,7,8,9} has 1*2*3*4*6*9 = 36^2."
    ],
    "program": [
        "(Python)",
        "from math import isqrt",
        "def is_square(n):",
        "    return isqrt(n) ** 2 == n",
        "def precompute_tuples(N):",
        "    tuples = []",
        "    for i in range(1, N + 1):",
        "        for j in range(i + 1, N + 1):",
        "            for k in range(j + 1, N + 1):",
        "                for l in range(k + 1, N + 1):",
        "                    for m in range(l + 1, N + 1):",
        "                        for n in range(m + 1, N + 1):",
        "                            if is_square(i * j * k * l * m * n):",
        "                                tuples.append((i, j, k, l, m, n))",
        "    return tuples",
        "def valid_subset(A, tuples):",
        "    set_A = set(A)",
        "    for i, j, k, l, m, n in tuples:",
        "        if i in set_A and j in set_A and k in set_A and l in set_A and m in set_A and n in set_A:",
        "            return False",
        "    return True",
        "def largest_subset_size(N, tuples):",
        "    from itertools import combinations",
        "    for size in reversed(range(1, N + 1)):",
        "        for subset in combinations(range(1, N + 1), size):",
        "            if valid_subset(subset, tuples):",
        "                return size",
        "for N in range(1, 26):",
        "    print(largest_subset_size(N, precompute_tuples(N)))"
    ],
    "xref": [
        "Similar to A028391, A013928, A372306, A373178, A373119, A373114.",
        "Cf. A000720."
    ],
    "keyword": "nonn,more,new",
    "offset": "1,2",
    "author": "_Terence Tao_, May 27 2024",
    "references": 0,
    "revision": 9,
    "time": "2024-05-27T15:42:30-04:00",
    "created": "2024-05-27T15:42:30-04:00"
}