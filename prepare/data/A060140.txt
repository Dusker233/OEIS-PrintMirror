{
    "number": 60140,
    "data": "0,1,3,9,10,27,28,30,81,82,84,90,91,243,244,246,252,253,270,271,273,729,730,732,738,739,756,757,759,810,811,813,819,820,2187,2188,2190,2196,2197,2214,2215,2217,2268,2269,2271,2277,2278,2430,2431,2433,2439",
    "name": "Ordered set S defined by these rules: 0 and 1 are in S and if x is a nonzero number in S, then 3x and 9x+1 are in S.",
    "comment": [
        "The numbers of the form 9x+1 occupy the same positions in S that 1 occupies in the infinite Fibonacci word (A003849).",
        "These are Fibternary numbers: numbers whose ternary representations consist only of zeros and ones and do not have two consecutive ones. The sequence of Fibternary numbers can be constructed by writing out the Zeckendorf representations of nonnegative integers and then evaluating the result in ternary. These numbers are similar to Fibbinary numbers A003714, Tribbinary numbers A060140, and Tribternary numbers A356823. The number of Fibternary numbers less than any power of three is a Fibonacci number. We can generate Fibternary numbers recursively: Start by adding 0 and 1 to the sequence. Then, if x is a number in the sequence add 3x and 9x+1 to the sequence. Every nonnegative integer can be written as the sum of four Fibternary numbers. Every number has a Fibternay multiple. - _Tanya Khovanova_ and PRIMES STEP Senior group, Aug 30 2022"
    ],
    "link": [
        "Ivan Neretin, <a href=\"/A060140/b060140.txt\">Table of n, a(n) for n = 0..10000</a>",
        "Clark Kimberling, <a href=\"http://www.cs.uwaterloo.ca/journals/JIS/VOL3/goldentext.html\">A Self-Generating Set and the Golden Mean</a>, J. Integer Sequences, 3 (2000), #00.2.8.",
        "Clark Kimberling, <a href=\"https://www.fq.math.ca/Papers1/52-3/Kimberling11132013.pdf\">Fusion, Fission, and Factors</a>, Fib. Q., 52 (2014), 195-202."
    ],
    "program": [
        "(Python)",
        "import heapq",
        "from itertools import islice",
        "def agen(): # generator of terms, using recursion in Comments",
        "    yield 0; x, h = None, [1]",
        "    while True:",
        "        x = heapq.heappop(h)",
        "        yield x",
        "        for t in [3*x, 9*x+1]:  heapq.heappush(h, t)",
        "print(list(islice(agen(), 51))) # _Michael S. Branicky_, Aug 30 2022"
    ],
    "xref": [
        "Cf. A060138, A060142."
    ],
    "keyword": "nonn",
    "offset": "0,3",
    "author": "_Clark Kimberling_, Mar 05 2001",
    "references": 7,
    "revision": 25,
    "time": "2022-09-04T12:45:59-04:00",
    "created": "2003-05-16T03:00:00-04:00"
}